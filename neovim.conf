""" Overall Configuration ----------
set tabstop=4
set shiftwidth=4
set expandtab

set number
set mouse=a
"set scrolloff=5
set termguicolors

set inccommand=split
set clipboard=unnamed " Share one clipboard for everything
set completeopt=longest,menuone,noselect

set background=dark
set t_Co=256

set autoread " Automatically update file if changed outside of Vim 
set autowrite " Automaically save file when swap between opened files

set nobackup
"set backupdir=~/.cache/nvim/backups
set noswapfile
"set directory=~/.cache/nvim/swapfiles
"set noundofile
set undodir=~/.cache/nvim/undofiles

""" Key Bindings -------------------
"" My keybindings
let mapleader="\<space>"
nnoremap <leader>q  :q<cr>
nnoremap <leader>w  :w<cr>
nnoremap <leader>x  :x<cr>
nnoremap <Leader>n  :next<CR>
nnoremap <leader>p  :prev<CR>

nnoremap <c-h>      :noh<cr>
nnoremap <cr><cr>   m`o<esc>``
nnoremap ;;         m`A;<esc>``
nnoremap ##         m`0i#<ESC>``
nnoremap ""         m`0i"<ESC>``
nnoremap //         m`0i//<ESC>``

"" reMapping things
map n nzz
map N Nzz
nnoremap <up>   g<up>
nnoremap <down> g<down>

"" Plugins Bindings
map <leader>vp  :VimuxPromptCommand<cr>
map <leader>vl  :VimuxRunLastCommand<cr>
map <Leader>wr  :w \| VimuxRunLastCommand<CR>

nnoremap <c-p>  :Files<cr>
nnoremap <c-f>  :Ag<space>

inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
            \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
            \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" more key mappings at end of file

""" Auto Commands ------------------
augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au VimEnter,WinEnter,BufWinEnter * hi cursorline gui=bold guifg=none guibg=#404747
    au WinLeave * setlocal nocursorline
augroup END

augroup PMenu
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * hi Pmenu guibg=#404040 guifg=white
augroup END

augroup VCenterCursor
  au!
  au BufEnter,WinEnter,WinNew,VimResized *,*.*
        \ let &scrolloff=winheight(win_getid())/3
augroup END

""" Plugin Management -----------
call plug#begin()

"" Plugins Installation ------------
Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}
"Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"Plug 'deoplete-plugins/deoplete-zsh'
"Plug 'deoplete-plugins/deoplete-jedi'
"Plug 'deoplete-plugins/deoplete-docker'
"Plug 'tweekmonster/deoplete-clang2'
"Plug 'tbodt/deoplete-tabnine', { 'do': './install.sh' }
"Plug 'deathlyfrantic/deoplete-spell'
Plug 'Shougo/neosnippet.vim'
Plug 'shougo/neosnippet-snippets'
" Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree' 
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'xuyuanp/nerdtree-git-plugin'
Plug 'tyok/nerdtree-ack'
Plug 'ivalkeen/nerdtree-execute'
" Plug 'jistr/vim-nerdtree-tabs'
Plug 'pseewald/nerdtree-tagbar-combined'
Plug 'terryma/vim-multiple-cursors'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'sheerun/vim-polyglot'
Plug 'jiangmiao/auto-pairs'
Plug 'godlygeek/tabular'
Plug 'Yggdroot/indentLine'
Plug 'severin-lemaignan/vim-minimap'
Plug 'wellle/tmux-complete.vim'
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
Plug 'w0rp/ale'
Plug 'tpope/vim-surround'
Plug 'roxma/vim-paste-easy'
Plug 'benmills/vimux'
Plug 'tmux-plugins/vim-tmux'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'ryanoasis/vim-devicons'
Plug 'majutsushi/tagbar'
Plug 'mileszs/ack.vim'
Plug 'vim-scripts/matchit.zip'
Plug 'airblade/vim-gitgutter'
Plug 'othree/eregex.vim'
Plug 'wellle/targets.vim'
Plug 'ervandew/supertab'
Plug 'kana/vim-arpeggio'
Plug 'lambdalisue/vim-manpager'
Plug 'tpope/vim-commentary'
Plug 'vifm/vifm.vim'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'liuchengxu/vim-clap'

"" Themes ----------
Plug 'challenger-deep-theme/vim', { 'as': 'challenger-deep' }
Plug 'felixhummel/setcolors.vim'
Plug 'flazz/vim-colorschemes'
Plug 'bling/vim-airline'
Plug 'jacoborus/tender.vim'
Plug 'sonph/onehalf', { 'rtp': '/vim' }
Plug 'flrnprz/candid.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'connorholyday/vim-snazzy'
Plug 'kaicataldo/material.vim'

call plug#end()

"" Theme Configuration ------------
colorscheme candid
let g:airline_theme='onehalfdark'

""" Plugins Configuration ----------

"" Ativa as fontes Powerline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

"" indentLine
let g:indentLine_char = '▏'

"" ALE
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'

"" Vim Tmux Navigation
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <C-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <C-Right> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

"" Ack.vim
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

"" NerdTREE Configurations
" Mappings
map <leader>' :NERDTreeToggle<CR>
" NERDTree Git
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

"" Deoplete Configuration
" Use deoplete.
"let g:deoplete#enable_at_startup = 1

"" NeoSnippet
let g:neosnippet#enable_completed_snippet = 1
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <leader><Tab>     <Plug>(neosnippet_expand_or_jump)
smap <leader><Tab>     <Plug>(neosnippet_expand_or_jump)
xmap <leader><Tab>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

"" SuperTAB
let g:SuperTabDefaultCompletionType = "<c-n>"

"" Coc
" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Use `lp` and `ln` for navigate diagnostics
nmap <silent> <leader>lp <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>ln <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> <leader>ld <Plug>(coc-definition)
nmap <silent> <leader>lt <Plug>(coc-type-definition)
nmap <silent> <leader>li <Plug>(coc-implementation)
nmap <silent> <leader>lf <Plug>(coc-references)

" Remap for rename current word
nmap <leader>lr <Plug>(coc-rename)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

"" Arpeggio KeyMappings
call arpeggio#map('n','',0,'sv',':vsplit<CR>')
call arpeggio#map('n','',0,'sh',':split<CR>')
call arpeggio#map('i','',0,'jo','<C-o>o')
call arpeggio#map('i','',0,'ko','<C-o>O')
call arpeggio#map('i','',0,'JO','m`<C-o>o<ESC>``')
call arpeggio#map('i','',0,'KO','m`<C-o>O<ESC>``')

filetype plugin on
filetype indent on
